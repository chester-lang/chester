
msgid ""
msgstr ""
"Project-Id-Version: The Chester Programming Language\n"
"POT-Creation-Date: 2024-10-11T14:56:24+13:00\n"
"PO-Revision-Date: \n"
"Last-Translator: \n"
"Language-Team: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: en\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: src/SUMMARY.md:1
msgid "https://github.com/rust-lang-nursery/mdBook/issues/677"
msgstr ""

#: src/SUMMARY.md:2 src/index.md:1
msgid "Chester"
msgstr ""

#: src/SUMMARY.md:3 src/Record.md:1
msgid "Record Syntax in Chester"
msgstr ""

#: src/SUMMARY.md:4 src/statements.md:1
msgid "Statements"
msgstr ""

#: src/index.md:3
msgid ""
"Welcome to the Chester Programming Language documentation! Chester is a "
"modern, expressive language designed to combine the best features of "
"functional and object-oriented programming paradigms."
msgstr ""

#: src/index.md:5
msgid "What is Chester?"
msgstr ""

#: src/index.md:7
msgid ""
"Chester is a statically-typed language that aims to provide a balance "
"between expressiveness and safety. It draws inspiration from languages like "
"Scala, Haskell, and Rust, while introducing its own unique features."
msgstr ""

#: src/index.md:9
msgid "Some key characteristics of Chester include:"
msgstr ""

#: src/index.md:11
msgid "Strong type system with type inference"
msgstr ""

#: src/index.md:12
msgid "Support for both functional and object-oriented programming styles"
msgstr ""

#: src/index.md:13
msgid "Pattern matching and algebraic data types"
msgstr ""

#: src/index.md:14
msgid "Effect system for managing side effects"
msgstr ""

#: src/index.md:15
msgid "Unicode support, allowing for expressive identifiers"
msgstr ""

#: src/index.md:17
msgid "A Glimpse of Chester"
msgstr ""

#: src/index.md:19
msgid ""
"Let's take a look at a simple Chester program to get a feel for the language:"
msgstr ""

#: src/index.md:21
msgid ""
"```chester\n"
"module üòøüòø;\n"
"\n"
"def me: String = \"„Ç§„É≥„Çø„Éº„Éç„ÉÉ„Éà„Éª„Ç®„É≥„Ç∏„Çß„É´\";\n"
"```"
msgstr ""

#: src/Record.md:3
msgid ""
"Chester provides a concise and powerful syntax for defining records, which "
"are similar to structs or classes in other languages. Records in Chester are "
"immutable by default and provide a convenient way to group related data."
msgstr ""

#: src/Record.md:5
msgid "Basic Record Syntax"
msgstr ""

#: src/Record.md:7
msgid "The basic syntax for defining a record in Chester is as follows:"
msgstr ""

#: src/Record.md:13
msgid "Here's a simple example of a `Person` record:"
msgstr ""

#: src/Record.md:19
msgid "Using Records"
msgstr ""

#: src/Record.md:21
msgid ""
"Once defined, you can create instances of records and access their fields:"
msgstr ""

#: src/Record.md:23
msgid ""
"```chester\n"
"let alice = Person(\"Alice\", 30)\n"
"println(alice.name)  // Outputs: Alice\n"
"println(alice.age)   // Outputs: 30\n"
"```"
msgstr ""

#: src/statements.md:3
msgid "Scope of `let` and `def`"
msgstr ""

#: src/statements.md:5
msgid ""
"In Chester, `let` and `def` are used to declare bindings, but they differ in "
"how they handle scoping and forward references. Understanding these "
"differences is crucial for writing correct and efficient Chester programs."
msgstr ""

#: src/statements.md:7
msgid "`let` Bindings"
msgstr ""

#: src/statements.md:9
msgid ""
"**Local Scope**: `let` bindings are only visible **after** their declaration "
"within the current block."
msgstr ""

#: src/statements.md:10
msgid ""
"**No Forward References**: You cannot reference a `let` binding before it's "
"declared."
msgstr ""

#: src/statements.md:11
msgid ""
"**Type Inference**: If no type annotation is provided, the compiler infers "
"the type from the binding's body."
msgstr ""

#: src/statements.md:13 src/statements.md:33
msgid "**Example:**"
msgstr ""

#: src/statements.md:15
msgid ""
"```chester,playground,editable\n"
"// Correct usage of 'let'\n"
"let x = 5;\n"
"let y = x; // 'x' is defined before use\n"
"```"
msgstr ""

#: src/statements.md:21
msgid ""
"```chester,playground,editable\n"
"// Incorrect usage of 'let'\n"
"let y = x + 2; // Error: 'x' is not defined yet\n"
"let x = 5;\n"
"```"
msgstr ""

#: src/statements.md:27
msgid "`def` Bindings"
msgstr ""

#: src/statements.md:29
msgid ""
"**Global Scope**: `def` bindings are visible throughout the entire block, "
"even before their declaration."
msgstr ""

#: src/statements.md:30
msgid ""
"**Allows Forward References**: You can reference a `def` binding before it's "
"declared."
msgstr ""

#: src/statements.md:31
msgid ""
"**Type Annotation Required for Forward References**: If you use a `def` "
"binding before its declaration, you must provide a type annotation."
msgstr ""

#: src/statements.md:35
msgid ""
"```chester,playground,editable\n"
"// Correct usage of 'def' with type annotation\n"
"def y = square(5); // 'square' is used before its declaration\n"
"\n"
"def square(n: Int) = n * n; // Type annotation for 'n' is required\n"
"```"
msgstr ""

#: src/statements.md:42
msgid ""
"```chester,playground,editable\n"
"// Incorrect usage of 'def' without type annotation\n"
"def y = increment(5); // 'increment' is used before its declaration\n"
"\n"
"def increment(n) = n + 1; // Error: Missing type annotation for 'n'\n"
"```"
msgstr ""

#: src/statements.md:49
msgid "Summary of Scoping Rules"
msgstr ""

#: src/statements.md:51
msgid "**`let` Bindings**:"
msgstr ""

#: src/statements.md:52
msgid "Visible only after their declaration within the current block."
msgstr ""

#: src/statements.md:53
msgid "Do **not** allow forward references."
msgstr ""

#: src/statements.md:54
msgid "Type annotations are optional if the type can be inferred."
msgstr ""

#: src/statements.md:56
msgid "**`def` Bindings**:"
msgstr ""

#: src/statements.md:57
msgid "Visible throughout the entire block."
msgstr ""

#: src/statements.md:58
msgid "Allow forward references."
msgstr ""

#: src/statements.md:59
msgid "Require type annotations when used before their declarations."
msgstr ""

#: src/statements.md:61
msgid "Compiler Behavior"
msgstr ""

#: src/statements.md:63
msgid ""
"When processing a block, the Chester compiler handles `let` and `def` "
"bindings differently to manage scope and type checking."
msgstr ""

#: src/statements.md:65
msgid "Processing `def` Bindings"
msgstr ""

#: src/statements.md:67
msgid "**Collection Phase**:"
msgstr ""

#: src/statements.md:68
msgid ""
"The compiler collects all `def` bindings, noting their names, type "
"annotations, and identifiers."
msgstr ""

#: src/statements.md:69
msgid "It tracks forward references to detect usages before declarations."
msgstr ""

#: src/statements.md:71
msgid "**Type Annotation Checks**:"
msgstr ""

#: src/statements.md:72
msgid ""
"For forward-referenced `def` bindings without type annotations, the compiler "
"reports a `MissingTypeAnnotationError`."
msgstr ""

#: src/statements.md:74
msgid "**Context Updates**:"
msgstr ""

#: src/statements.md:75
msgid ""
"The compiler adds placeholders or inferred types to the context, allowing "
"forward-referenced `def` bindings to be used."
msgstr ""

#: src/statements.md:77
msgid "Processing `let` Bindings"
msgstr ""

#: src/statements.md:79
msgid "**Sequential Processing**:"
msgstr ""

#: src/statements.md:80
msgid "`let` bindings are processed in order of their appearance."
msgstr ""

#: src/statements.md:81
msgid "Each `let` binding is added to the context **after** its declaration."
msgstr ""

#: src/statements.md:82
msgid "**No Forward References**:"
msgstr ""

#: src/statements.md:83
msgid "Referencing a `let` binding before its declaration results in an error."
msgstr ""

#: src/statements.md:85
msgid "Best Practices"
msgstr ""

#: src/statements.md:87
msgid ""
"Use `let` when you don't need to reference the binding before its "
"declaration."
msgstr ""

#: src/statements.md:88
msgid ""
"Use `def` when you need forward references or are defining recursive "
"functions."
msgstr ""

#: src/statements.md:89
msgid ""
"Always provide type annotations for `def` bindings that are "
"forward-referenced to avoid compilation errors."
msgstr ""

#: src/statements.md:91
msgid ""
"By understanding these scoping rules, you can write more predictable and "
"maintainable Chester code."
msgstr ""

