module ğŸ˜¿ğŸ˜¿;

trait #sealed Vector[n: Nat, T: Type];

data Nil <: Vector[0, T];

data Cons[n, T] <: Vector[succ(n), T] {
  head: T;
  tail: Vector[n, T];
}

cons1 = Cons(0, Nil);
cons2 = Cons %{ head = 0, tail = Nil };

implement Vector[n, T] {
  isEmpty: Boolean = ?todo;
}

module Vector {
  empty[T]: Vector[0, T] = Nil;
}